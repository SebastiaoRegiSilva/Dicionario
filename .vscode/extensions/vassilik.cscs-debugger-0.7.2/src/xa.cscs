weatherURL
=
"https://api.openweathermap.org/data/2.5/weather?zip=98052,us&units=imperial&APPID=8b66ab2055b5ec0a187cda308568dfaa";
jsonFromText
=
"";
function
OnSuccess(object,
text)
{
print(
"Success
"

+
text);
//jsonFromText
=
GetVariableFromJSON(
text
);
}

function
OnFailure(
object,
errorCode
)
{
print(
"Failure
"
+
errorCode
);
}

WebRequest(
"GET",
weatherURL,
"",
"",
"OnSuccess",
"OnFailure"
);

myStockSymbol
=
"MSFT";
stockUrl
=
"https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol="
+
myStockSymbol
+
"&apikey=LRVVPRP6RRO37ROX";
WebRequest(
"GET",
stockUrl,
"",
"",
"OnSuccess",
"OnFailure"
);

load
=
"firstName=Foo&lastName=Bar";

url="https://httpbin.org/put";
heaDers["key"]
=
"value";
#heaDers["Message2"]
=
"Data2";
headers.Keys;
#heaDers["messagE2"];
WebRequest(
"PUT",
url,
load,
"",
"OnSuccess",
"OnFailure",
headers
);

url="http://jsonplaceholder.typicode.com/posts";
WebRequest(
"POST",
url,
load,
"",
"OnSuccess",
"OnFailure"
);

a=1;
//b=2;
c=3;
//d=4;
e=5;

app;
app.topics;
for(
x
:
{
app
})
{
print(
x.topics
);
}

class
Stuff1
{
x
=
2;
Stuff1(a)
{
x
=
a;
}
function
ToString()
{
return
"{"
+
x
+
"}";
}
}

class
Stuff1
{
x
=
2;
Stuff1(a)
{
x
=
a;
}
function
addStuff1(n)
{
return
n
+
x;
}
}

class
Stuff2
{
y
=
3;
Stuff2(b)
{
y
=
b;
}
function
addStuff2(n)
{
return
n
+
y;
}
}

class
CoolStuff
:
Stuff1,
Stuff2
{
z
=
3;
CoolStuff(a=1,
b=2,
c=3)
{
x
=
a;
y
=
b;
z
=
c;
}
function
addCoolStuff()
{
return
x
+
addStuff2(z);
}
function
ToString()
{
return
"{"
+
x
+
","
+
y
+
","
+
z
+
"}";
}
}
obj1
=
new
CoolStuff();
obj2
=
new
CoolStuff(10);
obj3
=
new
CoolStuff(10,
20);
obj4
=
new
CoolStuff(10,
20,
30);

obj1
=
new
CoolStuff(10);
obj2
=
new
CoolStuff();
print(obj1);

for(
x
:
{obj1,
obj2})
{
print(
x
);
}
z={obj1,
obj2};
for(
x
:
z)
{
print(
x
);
}
/*
[MaquetteScript]
Fixed
{}
list
of
objects
bug;
enabled
default
parameters
in
a
constructor
and
implemented
ToString()
for
an
object.
function
FunctionNameInsideDoesNotExist()
{
FunctionDoesNotExist();
}
FunctionNameInsideDoesNotExist();

i
=
0;
while
(++i
<
10)
{
print("i=",
i);



//
GO
AWAY
print("i2=",
i);
if
(i
>
3)
{
break;
}
}
while
(i
<
10)
{
//
GO
AWAY
break;
}

a=1;
b=2;
c=3;
a;
//w
x=5;

function
printIt(
o1,
o2,
o3,
o4,
o5,
o6
)
{
print(
o1
);
print(
o2
);
print(
o3
);
print(
o4
);
print(
o5
);
print(
o6
);
}
printIt({},
"F1_256.png",
{
60,
60}
,
"",
"log.Warn(
'F1');",
"F1");

class
Stuff1
{
x
=
2;
Stuff1(a)
{
x
=
a;
}
function
addStuff1(n)
{
return
n
+
x;
}
}
class
CoolStuff
:
Stuff1
{
function
work(n)
{
return
10*addStuff1(n);
}
}
a
=
new
CoolStuff();
print(a.work(5));

ct
=
new
CompiledTest();
ct.NaMe2="Lala";
print(ct.properties);
print(ct.NaMe);

json
=
{};
stockUrl="https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=MSFT&apikey=demo";
function
OnSuccess(
object,
text
)
{
print(
"Success
xxx
"+text
);
json
=
GetVariableFromJsonNewton(text);
metaData
=
json["Meta
Data"];
print
(
metaData);
print(json[1][1]["2.
high"]);
print
(
metaData.keys);
for
(key
:
metaData.keys)
{
print("

key:",
key,
"\tDATA:",
metaData[key]);
}
}
function
OnFailure(
object,
errorCode
)
{
print(
"Falilure.",
errorCode
);
}
var
=
"";
WebRequest(stockUrl,
"OnSuccess",
"OnFailure",
"",
10,
0,
json);

json["Time
Series
(Daily)"][0].size
//HTTPCall(
"GET",
stockUrl,
"",
"",
"OnSuccess",
"OnFailure"
);

a[1][1]=
11;
x=
a[1][1].size;
x.size;



function TakeScreenshotsOfAllSpotlights()
{
viewpoints.Visible = false;
timestampString = system.UniqueTimestamp();
nSpotlightMax = spotlights.Count;
for( spotlightCounter=0; spotlightCounter<nSpotlightMax; spotlightCounter++)
{
currentName = spotlights.Name( spotlightCounter );
myDir = "c:/Spotlights/" + timestampString + "/";
spotlights.Load( spotlightCounter );
for( sceneCounter=0; sceneCounter<scenes.Count(); sceneCounter++)
{
scenes.Current = sceneCounter;
for( viewpointCounter=0; viewpointCounter<viewpoints.Count(); viewpointCounter++ )
{
v = viewpoints.Get( viewpointCounter );
viewpoints.Goto( viewpointCounter );
app.WaitForFrame();
sName = myDir + "" + spotlightCounter + "_" + sceneCounter + "_" + viewpointCounter + "_" + v.Name + ".png");
ui.TakeScreenshot( myDir + "" + spotlightCounter + "_" + sceneCounter + "_" + viewpointCounter + "_" + v.name + ".png");
}
}
}
}
for( viewpointCounter=0; viewpointCounter<viewpoints.Count(); viewpointCounter++ )
{
{}
}
//comm

*/
lines
=
readfile("/Users/vassili/GitHub/cscs-debugger/src/testExtension.cscs");
count
=
size(lines);
Print("lines
in
file
",
count);
for
(line
:
lines)
{
line
=
StrTrim(line);
Print("line
",
line);
tokens
=
tokenize(line,
'
');
Print("tokens
in
line
"
,
size(tokens));
for(
token
:
tokens
){
Print("
t
:
",
token);
appendline("/Users/vassili/GitHub/cscs-debugger/src/xa.cscs",
token);
}
}
